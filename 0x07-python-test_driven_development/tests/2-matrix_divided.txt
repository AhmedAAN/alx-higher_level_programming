The ''2-matrix_divided'' module
===============================
Using ''matrix_divided''
------------------------

First import ``matrix_divided`` from the ``2-matrix_divided`` module:

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

The function devides the elements of the matrix:
    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

The original matrix is left unchanged:
    >>> print(matrix)
    [[1, 2, 3], [4, 5, 6]]

The function can handle floats:
    >>> matrix = [
    ...     [1.5, 2.6, -3],
    ...     [4, -5.0, 6.8]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[0.5, 0.87, -1.0], [1.33, -1.67, 2.27]]

Errors
------

If the matrix is empty, TypeError is raised:
    >>> matrix = []
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

If the matrix is list of empty lists, no Error is raised:
    >>> matrix = [[]]
    >>> print(matrix_divided(matrix, 3))
    [[]]

If the matrix is not a list of lists, TypeError is raised:
    >>> matrix = [1, 5, 6, [1, 5]]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

If the elements aren't integers or floats, TypeError is raised:
    >>> matrix = [
    ...     [1, 0.6],
    ...     ["hello", 29]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

If the rows of the matrix is not of the same size, TypeError is raised:
    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6],
    ...     [7, 8]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

If the divisor is not integer or float, TypeError is raised:
    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, "3"))
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

    >>> print(matrix_divided(matrix, None))
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

If the divisor is 0, ZeroDivisionError is raised:
    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero